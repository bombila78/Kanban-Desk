{"version":3,"sources":["helpers/utils.js","intefaces.ts","components/Header.tsx","components/TodoButton.tsx","components/Todo.tsx","components/DeskColumn.tsx","api/todo.ts","components/TaskDesk.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Object","defineProperty","exports","value","compareTodoStatuses","a","b","priority","todoStatusIds","Header","className","href","TodoButton","title","changeStatusHandler","todoId","onClick","Todo","todo","destroyTodoHandler","useState","timer","setTimer","price","setPrice","useEffect","startTimestamp","interval","setInterval","moment","Date","now","subtract","format","clearInterval","finishTimestamp","priceString","Intl","NumberFormat","currency","style","status_id","inProgressId","doneId","additionalInfo","id","todoButton","DeskColumn","todos","renderTodos","map","el","getTodos","axios","get","data","post","TaskDesk","todoStatuses","setTodoStatuses","deskColumns","setDeskColumns","updatedTodo","reduce","acc","push","Todos","find","updateTodo","then","prev","catch","err","console","error","destroyTodo","fetchTodos","sort","alias","window","prompt","trim","startStatus","newTodo","createTodo","alert","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iHACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQE,yBAAsB,EAI9BF,EAAQE,oBAHR,SAA6BC,EAAGC,GAC5B,OAAOD,EAAEE,SAAWD,EAAEC,W,yHCWdC,E,iCCHGC,G,MAVU,WACrB,OACI,6BACI,yBAAKC,UAAU,6BACX,uBAAGC,KAAK,IAAID,UAAU,cAAtB,mB,gDDSJF,O,mBAAAA,I,+BAAAA,I,oBAAAA,M,KEPZ,IAQeI,EAR+B,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,oBAAqBC,EAAa,EAAbA,OACzE,OACI,4BAAQL,UAAU,+BAA+BM,QAAS,kBAAMF,EAAoBC,KAAUF,EAC1F,uBAAGH,UAAU,wBAAb,U,iBCsEGO,EAlEmB,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMJ,EAA8C,EAA9CA,oBAAqBK,EAAyB,EAAzBA,mBAAyB,EAE3DC,mBAAiB,IAF0C,mBAE9EC,EAF8E,KAEvEC,EAFuE,OAG3DF,mBAAiB,IAH0C,mBAG9EG,EAH8E,KAGvEC,EAHuE,KAKrFC,qBAAU,WACN,GAAKP,EAAKQ,eAAV,CACA,IAAMC,EAAWC,aAAY,WACzBN,EAASO,IAAOC,KAAKC,MAAQb,EAAKQ,gBACrBM,SAAS,EAAG,KACZC,OAAO,eACrB,KACH,OAAO,kBAAMC,cAAcP,OAC5B,IAEHF,qBAAU,WACN,GAAKP,EAAKQ,gBAAmBR,EAAKiB,gBAAlC,CACA,IACMZ,EA5Be,MA2BFL,EAAKiB,gBAAmBjB,EAAKQ,gBAA9B,MAEZU,EAAc,IAAIC,KAAKC,aAAa,QAAS,CAC/CC,SAAU,MACVC,MAAO,aACRP,OAAOV,GACVC,EAASY,MACV,IA2BH,OACQ,yBAAK1B,UAAU,WACX,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,cAAcQ,EAAKL,QAhBhC,WACnB,OAAQK,EAAKuB,WACT,KAAKjC,EAAcO,OACf,OAAO,0BAAML,UAAU,eAAhB,oBACX,KAAKF,EAAckC,aACf,OAAO,0BAAMhC,UAAU,SAASW,GACpC,KAAKb,EAAcmC,OACf,OAAO,0BAAMjC,UAAU,SAASa,GACpC,QACI,OAAO,MASEqB,GACL,yBAAKlC,UAAU,eAhCZ,WACf,OAAQQ,EAAKuB,WACT,KAAKjC,EAAcO,OACf,OAAO,kBAAC,EAAD,CAAYF,MAAM,uCAASE,OAAQG,EAAK2B,GAAI/B,oBAAqBA,IAC5E,KAAKN,EAAckC,aACf,OAAO,kBAAC,EAAD,CAAY7B,MAAM,yDAAYE,OAAQG,EAAK2B,GAAI/B,oBAAqBA,IAC/E,KAAKN,EAAcmC,OACf,OAAO,kBAAC,EAAD,CAAY9B,MAAM,kFAAiBE,OAAQG,EAAK2B,GAAI/B,oBAAqBK,IACpF,QACI,OAAO,MAwBE2B,OC7CVC,EAlB+B,SAAC,GAA+D,IAA7DlC,EAA4D,EAA5DA,MAAOmC,EAAqD,EAArDA,MAAOlC,EAA8C,EAA9CA,oBAAqBK,EAAyB,EAAzBA,mBAE1E8B,EAA4BD,EAAME,KAAI,SAAAC,GACxC,OAAQ,kBAAC,EAAD,CAAMjC,KAAMiC,EAAIrC,oBAAqBA,EAAqBK,mBAAoBA,OAE1F,OACI,yBAAKT,UAAU,UACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,gCACX,4BAAKG,GACJoC,M,gBClBd,SAAeG,IAAtB,+B,4CAAO,8BAAA/C,EAAA,sEACoBgD,IAAMC,IAAI,cAD9B,uBACKC,EADL,EACKA,KADL,kBAEIA,GAFJ,4C,kEAKA,WAA2BrC,GAA3B,iBAAAb,EAAA,sEACoBgD,IAAMG,KAAK,oBAAqB,CAAEtC,SADtD,uBACKqC,EADL,EACKA,KADL,kBAEIA,GAFJ,4C,kEAKA,WAA2BrC,GAA3B,iBAAAb,EAAA,sEACoBgD,IAAMG,KAAK,oBAAqB,CAAEtC,SADtD,uBACKqC,EADL,EACKA,KADL,kBAEIA,GAFJ,4C,kEAKA,WAA4BV,GAA5B,SAAAxC,EAAA,sEACGgD,IAAMG,KAAK,qBAAsB,CAAEX,OADtC,4C,kCCqGQY,EAjHY,WAAO,IAAD,EAEWrC,mBAAwB,IAFnC,mBAEtBsC,EAFsB,KAERC,EAFQ,OAGSvC,mBAAwB,IAHjC,mBAGtBwC,EAHsB,KAGTC,EAHS,KAkCvB/C,EAAsB,SAAC+B,GACzB,IAKMiB,EALiBJ,EAAaK,QAAO,SAACC,EAAcb,GAEtD,OADAa,EAAIC,KAAJ,MAAAD,EAAG,YAASb,EAAGe,QACRF,IACR,IAEuBG,MAAK,SAAAhB,GAAE,OAAIA,EAAGN,KAAOA,KAE1CiB,IAELA,EAAYrB,UAAYqB,EAAYrB,UAAY,EAE5CqB,EAAYrB,YAAcjC,EAAckC,eACxCoB,EAAYpC,eAAiBI,KAAKC,OAGlC+B,EAAYrB,YAAcjC,EAAcmC,SACxCmB,EAAY3B,gBAAkBL,KAAKC,OD5CxC,SAAP,kCC8CQqC,CAAWN,GACNO,MAAK,WACFjB,IACKiB,MAAK,SAAAd,GACFI,GAAgB,SAAAW,GAAI,OAAIf,WAGnCgB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAG9BrD,EAAqB,SAAC0B,IDnDzB,SAAP,mCCoDQ8B,CAAY9B,GACPwB,MAAK,WACFjB,IACKiB,MAAK,SAAAd,GACFI,GAAgB,SAAAW,GAAI,OAAIf,YA6B5C,OAxBA9B,qBAAU,YACU,uCAAG,4BAAApB,EAAA,sEACK+C,IADL,OACTJ,EADS,OAEfW,EAAgBX,GAFD,2CAAH,qDAIhB4B,KACD,IAEHnD,qBAAU,WAaNoC,GAZoB,WAChB,OAAOH,EACFmB,KAAKzE,uBACL8C,KAAI,SAAAC,GACD,OAAQ,kBAAC,EAAD,CACJtC,MAAOsC,EAAG2B,MACV9B,MAAOG,EAAGe,MACV/C,mBAAoBA,EACpBL,oBAAqBA,YAKtC,CAAC4C,IAGA,yBAAKhD,UAAU,aACX,yBAAKA,UAAU,2BACX,4BACIA,UAAU,sDACVM,QAjGG,WACf,IAAMH,EAAuBkE,OAAOC,OAAO,8BAC3C,GAAa,MAATnE,GAAkBA,EAAMoE,OAA5B,CAIA,IAAMC,EAAcxB,EAAaS,MAAK,SAAAhB,GAAE,MAAiB,UAAbA,EAAG2B,SAC/C,GAAKI,EAAL,CAKA,IAAMC,EAAiB,CACnBtC,GAAI,EACJhC,MAAOA,EACP4B,UAAWyC,EAAYrC,KDlB5B,SAAP,mCCqBQuC,CAAWD,GACNd,MAAK,SAAAxB,GAAE,OAAIsC,EAAQtC,GAAKA,KACxBwB,MAAK,WACFjB,IACKiB,MAAK,SAAAd,GACFI,GAAgB,SAAAW,GAAI,OAAIf,WAGnCgB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,WAlB5Ba,MAAM,oCALNA,MAAM,gCA+FE,uBAAG3E,UAAU,kBAAb,SAGR,yBAAKA,UAAU,OACVkD,KClGF0B,G,MAVO,WACpB,OACE,oCACE,kBAAC,EAAD,MACA,wBAAI5E,UAAU,cAAd,aACE,kBAAC,EAAD,SCEY6E,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd7B,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM2B,c","file":"static/js/main.98feba84.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareTodoStatuses = void 0;\nfunction compareTodoStatuses(a, b) {\n    return a.priority - b.priority;\n}\nexports.compareTodoStatuses = compareTodoStatuses;\n","export interface ITodo {\n    id: number,\n    title: string,\n    status_id: number,\n    startTimestamp?: number,\n    finishTimestamp?: number\n}\n\nexport interface ITodoStatus {\n    id: number,\n    priority: number,\n    alias: string,\n    Todos: ITodo[]\n}\n\nexport enum todoStatusIds {\n    todoId = 1,\n    inProgressId,\n    doneId\n}","import React from 'react'\n\nconst Header: React.FC = () => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper blue darken-2\">\n                <a href=\"/\" className=\"brand-logo\">Kanban-Desk</a>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header","import React from 'react'\n\ninterface TodoButtonProps {\n    title: string,\n    changeStatusHandler(id: number):void,\n    todoId:number\n}\n\nconst TodoButton: React.FC<TodoButtonProps> = ({ title, changeStatusHandler, todoId }) => {\n    return (\n        <button className=\"btn waves-effect waves-light\" onClick={() => changeStatusHandler(todoId)}>{title}\n            <i className=\"material-icons right\">send</i>\n        </button>\n    )\n}\n\nexport default TodoButton","import React, { useEffect, useState } from 'react'\nimport { ITodo, todoStatusIds } from '../intefaces'\nimport TodoButton from './TodoButton'\nimport moment from 'moment'\n\nconst pricePerHour: number = 1000\n\ninterface TodoProps {\n    todo: ITodo,\n    changeStatusHandler(id: number):void,\n    destroyTodoHandler(id: number):void\n}\n\n\n\nconst Todo: React.FC<TodoProps> = ({ todo, changeStatusHandler, destroyTodoHandler }) => {\n\n    const [timer, setTimer] = useState<string>('')\n    const [price, setPrice] = useState<string>('')\n\n    useEffect(() => {\n        if (!todo.startTimestamp) return\n        const interval = setInterval(() => {\n            setTimer(moment(Date.now() - todo.startTimestamp!)\n                        .subtract(3, 'h')\n                        .format('HH:mm:ss'))\n        }, 1000)\n        return () => clearInterval(interval)\n    }, [])\n\n    useEffect(() => {\n        if (!todo.startTimestamp || !todo.finishTimestamp) return\n        const timeSpent = (todo.finishTimestamp! - todo.startTimestamp!) / (3600 * 1000)\n        const price = timeSpent * pricePerHour\n        const priceString = new Intl.NumberFormat('en-In', {\n            currency: 'usd',\n            style: 'currency'\n        }).format(price)\n        setPrice(priceString)\n    }, [])\n\n    const todoButton = ():JSX.Element | null => {\n        switch (todo.status_id) {\n            case todoStatusIds.todoId:\n                return <TodoButton title=\"Начать\" todoId={todo.id} changeStatusHandler={changeStatusHandler} />\n            case todoStatusIds.inProgressId:\n                return <TodoButton title=\"Завершить\" todoId={todo.id} changeStatusHandler={changeStatusHandler} />\n            case todoStatusIds.doneId:\n                return <TodoButton title=\"Удалить задачу\" todoId={todo.id} changeStatusHandler={destroyTodoHandler} />\n            default:\n                return null\n        }\n    }\n\n    const additionalInfo = ():any => {\n        switch (todo.status_id) {\n            case todoStatusIds.todoId:\n                return <span className=\"not-started\">Task not started</span>\n            case todoStatusIds.inProgressId:\n                return <span className=\"timer\">{timer}</span>\n            case todoStatusIds.doneId:\n                return <span className=\"price\">{price}</span>\n            default:\n                return null\n        }\n    }\n    return (\n            <div className=\"col s12\">\n                <div className=\"card blue-grey darken-1 center\">\n                    <div className=\"card-content white-text\">\n                        <span className=\"card-title\">{todo.title}</span>\n                    </div>\n                        {additionalInfo()}\n                    <div className=\"card-action\">\n                        {todoButton()}\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo'\nimport { ITodo } from '../intefaces'\n\ninterface DeskColumnProps {\n    title: string,\n    todos: ITodo[],\n    changeStatusHandler(id: number):void,\n    destroyTodoHandler(id: number):void\n}\n\nconst DeskColumn: React.FC<DeskColumnProps> = ({ title, todos, changeStatusHandler, destroyTodoHandler }) => {\n\n    const renderTodos:JSX.Element[] = todos.map(el => {\n        return (<Todo todo={el} changeStatusHandler={changeStatusHandler} destroyTodoHandler={destroyTodoHandler}/>)\n    })\n    return (\n        <div className=\"col s4\">\n            <div className=\"desk-column-wrapper\">\n                <div className=\"desk-column yellow lighten-4\">\n                    <h4>{title}</h4>\n                    {renderTodos}\n                </div>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default DeskColumn","import axios from 'axios'\nimport { ITodoStatus, ITodo } from '../intefaces'\n\nexport async function getTodos (): Promise<ITodoStatus[]> {\n    const { data } = await axios.get('/api/todos')\n    return data\n}\n\nexport async function createTodo (todo: ITodo):Promise<number> {\n    const { data } = await axios.post('/api/todos/create', { todo })\n    return data\n}\n\nexport async function updateTodo (todo: ITodo):Promise<number> {\n    const { data } = await axios.post('/api/todos/update', { todo })\n    return data\n}\n\nexport async function destroyTodo (id: number):Promise<void> {\n    await axios.post('/api/todos/destroy', { id })\n}","import React, { useState, useEffect } from 'react'\nimport DeskColumn from './DeskColumn'\nimport { ITodo, ITodoStatus, todoStatusIds } from '../intefaces'\nimport { getTodos, createTodo, updateTodo, destroyTodo } from '../api/todo'\nimport { compareTodoStatuses  } from '../helpers/utils'\n\nconst TaskDesk: React.FC = () => {\n\n    const [todoStatuses, setTodoStatuses] = useState<ITodoStatus[]>([])\n    const [deskColumns, setDeskColumns] = useState<JSX.Element[]>([])\n\n    const addHandler = (): void => {\n        const title: string | null = window.prompt('Provide a new ToDo, please')\n        if (title == null || !title.trim()) {\n            alert('You should write something')\n            return\n        }\n        const startStatus = todoStatuses.find(el => el.alias === \"To Do\")\n        if (!startStatus) {\n            alert('Todo statuses are undefined')\n            return\n        }\n\n        const newTodo: ITodo = {\n            id: 0,\n            title: title,\n            status_id: startStatus.id\n        }\n\n        createTodo(newTodo)\n            .then(id => newTodo.id = id)\n            .then(() => {\n                getTodos()\n                    .then(data => {\n                        setTodoStatuses(prev => data)\n                    })\n            })\n            .catch(err => console.error(err))\n    }\n\n    const changeStatusHandler = (id: number): void => {\n        const todos: ITodo[] = todoStatuses.reduce((acc: ITodo[], el) => {\n            acc.push(...el.Todos)\n            return acc\n        }, [])\n\n        const updatedTodo = todos.find(el => el.id === id)\n\n        if (!updatedTodo) return\n\n        updatedTodo.status_id = updatedTodo.status_id + 1\n\n        if (updatedTodo.status_id === todoStatusIds.inProgressId) {\n            updatedTodo.startTimestamp = Date.now()\n        }\n\n        if (updatedTodo.status_id === todoStatusIds.doneId) {\n            updatedTodo.finishTimestamp = Date.now()\n        }\n        updateTodo(updatedTodo)\n            .then(() => {\n                getTodos()\n                    .then(data => {\n                        setTodoStatuses(prev => data)\n                    })\n            })\n            .catch(err => console.error(err))\n    }\n\n    const destroyTodoHandler = (id: number): void => {\n        destroyTodo(id)\n            .then(() => {\n                getTodos()\n                    .then(data => {\n                        setTodoStatuses(prev => data)\n                    })\n            })\n    }\n\n    useEffect(() => {\n        const fetchTodos = async () => {\n            const todos = await getTodos()\n            setTodoStatuses(todos)\n        }\n        fetchTodos()\n    }, [])\n\n    useEffect(() => {\n        const deskColumns = () => {\n            return todoStatuses\n                .sort(compareTodoStatuses)\n                .map(el => {\n                    return (<DeskColumn\n                        title={el.alias}\n                        todos={el.Todos}\n                        destroyTodoHandler={destroyTodoHandler}\n                        changeStatusHandler={changeStatusHandler}\n                    />)\n                })\n        }\n        setDeskColumns(deskColumns)\n    }, [todoStatuses])\n\n    return (\n        <div className=\"container\">\n            <div className=\"button-container center\">\n                <button\n                    className=\"btn-floating btn-large waves-effect waves-light red\"\n                    onClick={addHandler}>\n                    <i className=\"material-icons\">add</i>\n                </button>\n            </div>\n            <div className=\"row\">\n                {deskColumns}\n            </div>\n        </div>\n    )\n}\n\nexport default TaskDesk","import React from 'react';\nimport Header from './components/Header'\nimport TaskDesk from './components/TaskDesk'\nimport './style.scss'\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Header />\n      <h2 className=\"desk-title\">ToDo Desk</h2>\n        <TaskDesk />\n    </>\n  ) \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}